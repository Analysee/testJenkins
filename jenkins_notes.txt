setup jenkins on azure


Wat is jenkins ?
Open source - GRATIS! Web based Java Tool
Highly extensible - veeeeeel plugins die je toestaan om met alles en nog wat te integreren, zelf plugins maken kan ook.
Stuk software dat op een build server draait en het staat je toe om continuous integration toe te passen.
Jenkins orchestreerd alle builds

Het probleem: developers werken in isolatie, en mergen hun code niet vaak genoeg.

Oplossing: Continuous integration

Wat is continuous integration?
Alle check ins worden automatisch geintegreerd, code van alle developers wordt heel frequent gecombineerd en met stappen automatisch naar productie gegooid.

Tunnel maken met commando: ssh -L 127.0.0.1:8080:localhost:8080 jenkinsadmin@jenkinstest24.westeurope.cloudapp.azure.com
Password: Kvmechelen1904

Vervolgens naar http://localhost:8080/ surfen om met jenkins te werken op de VM.

Inloggen met username: lcjenkins
		     password:lcjenkins123!
			 
			 
	maven folder downloaden en in program files zetten, vervolgens environment  variabelen toevoegen zodat je de maven cli van overal kan gebruiken.
	
	Test project met de maven cli maken: mvn archetype:generate 
	-DgroupId={project-packaging}
	-DartifactId={project-name}
	-DarchetypeArtifactId={maven-template} 
	-DinteractiveMode=false
			 

Om java en maven te gebruiken in een jenkinsscript, verwijder de versies nummer en gebruik gewoon maven : "maven". Ook afstemmen op de global config.
Sonarqube werkt nog niet, credentials nodig -> vraag ben.


Voorbeeld:

pipeline {
    agent any
triggers {
      pollSCM('* * * * *')  //elke minuut pollen, NOTE: bij build failure blijft hij elke minuut builden!!! -> webhook configureren, 
    }
    tools {
        maven 'maven' //geen versies bijzetten
        jdk 'jdk'
    }
    stages {
        stage ('Initialize') {
	      
            steps {
                sh '''
                    echo "PATH = ${PATH}"
                    echo "M2_HOME = ${M2_HOME}"
                '''
            }
        }

        stage ('Build') {
            steps {
                sh 'mvn -Dmaven.test.failure.ignore=true install' 
            }
            post {
                success {
                    junit 'target/surefire-reports/**/*.xml' 
                }
            }
        }
    }
}

Webhook configuratie:

Video: tis nen indier ma echt nuttig filmke voor de verandering.
https://www.youtube.com/watch?v=-D2W8LBcklc

Jenkins:
-Download de github plugin in jenkins.
-Ga naar global config, add github server, create credentials van login en wachtwoord van de github user.

Github: //let op de poort, indier op youtube zegt dat dat ECHT NODIG IS
Repo > settings>webhooks url = http://jenkinstest24.westeurope.cloudapp.azure.com:80/github-webhook/



SonarQube:
profiel aanmaken op sonerclould
project aanmaken -> mvn command kopieëren en in jenkinsfile steken


        stage('SonarQube analysis') {
            steps {
                sh 'mvn sonar:sonar \
                -Dsonar.projectKey=please \
                -Dsonar.organization=analysee-github \
                -Dsonar.host.url=https://sonarcloud.io \
                -Dsonar.login=480fc6930d0cca103bb7c7b33407506c0c168868'
            }
        }






